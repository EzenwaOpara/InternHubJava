<resources>
    <string name="app_name">InternHub Java</string>
    <string name="tab_text_1">OUTLINE</string>
    <string name="tab_text_2">EXAMPLES</string>
    <string name="intern_hub_header_image">InternHub header image</string>
    <string name="java_curriculum">Internify Hub Java curriculum</string>
    <string name="outline_intro">Welcome to Internify Hub Java curriculum</string>
    <string name="examples_intro">Click on each button to see the examples we are going to look at for each of the topics.</string>
    <string name="javaIOintro">Java I/O introduces Java application programming. We begin with examples of programs that display (output) messages on the screen. We then present a program that obtains (inputs) two numbers from a user, calculates their sum and displays the result. You’ll learn how to instruct the computer to perform arithmetic calculations and save their results for later use.</string>
    <string name="arrayIntro">Array objects are data structures consisting of related data items of the same type. Arrays make it convenient to process related groups of values. Arrays remain the same length once they’re created. After discussing how arrays are declared, created and initialized, we present practical examples that demonstrate common array manipulations.</string>
    <string name="classObjIntro">Here, you will learn how to create your own classes and methods. Each new class you create becomes a new type that can be used to declare variables and create objects. You can declare new classes as needed; this is one reason why Java is known as an extensible language. Object-oriented programming (OOP) involves programming using objects. An object represents an entity in the real world that can be distinctly identified. For example, a student, a desk, a circle, a button, and even a loan can all be viewed as objects. An object has a unique identity, state, and behavior.</string>
    <string name="ctrlIntro">In the most basic sense, a program is a list of instructions. Control structures are programming blocks that can change the path we take through those instructions. In this tutorial, we’ll explore control structures in Java. There are three kinds of control structures: Conditional Branches, which we use for choosing between two or more paths. There are three types in Java: if/else/else if, ternary operator and switch. Loops that are used to iterate through multiple values/objects and repeatedly run specific code blocks. The basic loop types in Java are for, while and do while. Branching Statements, which are used to alter the flow of control in loops. There are two types in Java: break and continue.</string>
    <string name="exceptIntro">An exception is an indication of a problem that occurs during a program’s execution. Exception handling enables you to create applications that can resolve (or handle) exceptions. In many cases, handling an exception allows a program to continute executing as if no problem had been encountered. The features presented in this section help you write robust and fault-tolerant programs that can deal with problems and continue executing or terminate gracefully. Java exception handling is based in part on the work of Andrew Koenig and Bjarne Stroustrup.</string>
    <string name="inheritanceIntro">This section continues our discussion of object-oriented programming (OOP) by introducing inheritance, in which a new class is created by acquiring an existing class’s members and possibly embellishing them with new or modified capabilities. With inheritance, you can save time during program development by basing new classes on existing proven and debugged high-quality software. This also increases the likelihood that a system will be implemented and maintained effectively. When creating a class, rather than declaring completely new members, you can designate that the new class should inherit the members of an existing class. The existing class is called the superclass, and the new class is the subclass. (The C++ programming language refers to the superclass as the base class and the subclass as the derived class.) A subclass can become a superclass for future subclasses.</string>
    <string name="polyIntro">We continue our study of object-oriented programming by explaining and demonstrating polymorphism with inheritance hierarchies. Polymorphism enables you to “program in the general” rather than “program in the specific.” In particular, polymorphism enables you to write programs that process objects that share the same superclass, either directly or indirectly, as if they were all objects of the superclass; this can simplify programming.</string>
    <string name="exampleText">We shall take as many examples as possible on each of the following:</string>
</resources>
